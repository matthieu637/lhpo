#!/bin/bash

WORKS=$(ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o HashKnownHosts=no  -i .ssh/id_rsa_clust mzimmer@nancy.grid5000.fr next_work)

if [[ $WORKS == "" ]] ; then
        echo "no more work to do"
        exit 0
else
        echo "recover all nodes, going to dispatch :"
        echo "$WORKS"
fi

if [ -e ~/.ssh/known_hosts ] ; then
        rm ~/.ssh/known_hosts
fi

SSH="ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o HashKnownHosts=no -o ConnectTimeout=5 -i .ssh/id_rsa_clust"

function relaunch(){
       new_work=$(echo "$WORKS" | shuf | head -n 1)
       work="cd /home/mzimmer/home_ftalc/git/drl/scripts/extern/lhpo/ && ./optimizer.bash /home/mzimmer/home_grid5000/$new_work $2"
       node=$1
       $SSH -q -nt mzimmer@$node "screen -dm bash --login -c \"$work ; exec bash\""
       sleep 8s
}

sleep 1s

sites=`ls -d * | grep -v access | shuf`
all_node_file=`mktemp`

for site in $sites ; do
        if [[  $site == "toulouse" || $site == "reims" ]] ; then
                continue
        fi

        echo "$site"
        $SSH -q -nt $site 'afficher_all_node | uniq' >> $all_node_file
done


#remove all node that works hard
#cat $all_node_file | sort | uniq | shuf | while read node ; do
for node in $(cat $all_node_file) ; do
        nodeidle=`timeout -s SIGKILL 3 $SSH mzimmer@$node /home/mzimmer/home_ftalc/utils/cpu_usage.bash 2> /dev/null`
        if [ $? -ne 0 ]; then
                echo "?? ($node) bugged or booting"
        elif [ $nodeidle -lt 95 ] ; then
                uptime=`timeout -s SIGKILL 3 $SSH mzimmer@$node 'let tDiff=($(date +%s)-$(date --date="$(uptime -s)" +%s))/60;echo $tDiff'`
                if [ $? -ne 0 ]; then
                        echo "?? ($node) bugged"
                elif [ $uptime -gt 6 ] ; then
                        nbcpu=`timeout -s SIGKILL 3 $SSH mzimmer@$node 'cat /proc/cpuinfo | grep processor | wc -l'`
                        nbscreen=`timeout -s SIGKILL 3 $SSH mzimmer@$node 'ps aux | grep SCREEN | grep -v grep | wc -l'`
                        let mcpu="${nbcpu}-2"
                        let supportable_charge="(100/$nbcpu)*$mcpu"
                        let supportable_charge_approx="$supportable_charge-4"
                        let cpu_used="(99+$nbcpu*$nodeidle)/100"
                        if [[ $nbscreen -ge 70 ]] ; then
                                echo "$node                     : $nodeidle < $supportable_charge | $cpu_used/$nbcpu ($uptime -- $nbscreen )    [deploy failed]"
                        elif [[ $nodeidle -lt $supportable_charge_approx && $cpu_used -lt $mcpu ]] ; then
                                echo "$node                     : $nodeidle < $supportable_charge | $cpu_used/$nbcpu ($uptime -- $nbscreen )    [relaunch]"
                                let more_cpu_free="$mcpu-$cpu_used"
                                relaunch $node $more_cpu_free
                        else
                                echo "$node                     : $nodeidle < $supportable_charge | $cpu_used/$nbcpu ($uptime -- $nbscreen )    [ok]"
                        fi
                fi
        fi
done

rm $all_node_file
exit 0

